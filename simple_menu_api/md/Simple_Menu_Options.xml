<?xml version="1.0" encoding="utf-8" ?>
<mdscript name="Simple_Menu_Options" 
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >

  <!--
  MD side of a stock options menu for customizing menus.
  Initial effort will focus on egosoft menus, and not custom ones.
  
  This will handle the options submenu setup, and will store prior
  state to remember player's settings.
  
  TODO:
  Set up on/off widgets/buttons to be interactable by clicking anywhere on
  their  line, like ego menus. Currently they require clicking the widget itself.
  
  -->

  <cues>

    <!-- Register the main lua file. -->
    <cue name="Load_Lua_Files" instantiate="true">
      <conditions>
        <event_ui_triggered screen="'Lua_Loader'" control="'Ready'" />
      </conditions>
      <actions>
        <raise_lua_event name="'Lua_Loader.Load'"
                         param="'extensions.simple_menu_api.lua.Custom_Options'"/>
      </actions>
    </cue>

    <!--
      Static cue for holding general state.
    
      * DebugChance
        - Int, 0 or 100.
      * storage
        - Table, keyed by option id, holding its current value.
        - Preserved across reloads.
      * options
        - List of subtables, each describing an option, in order that they
          should be displayed.
        - Subtable contents:
          * disabled
            - Bool or non-existent, if true then disabling this option
              pending further development.
          * id
            - String identifier for the option, starting with $.
          * name
            - String, display name of the option.
          * mouseover
            - String, extended description of the option.
          * default
            - Anything, default value when the option is first stored.
          * type
            - String, type of widget to make.
          * args
            - Table, extra arguments to pass to Send_Command to set up the
              display/control widget.
    -->
    <cue name="Globals">
      <actions>
        <!-- Create storage table on first load. -->
        <set_value name="Globals.$storage"   exact="table[]"/>
        <include_actions ref="Reset_Globals"/>
      </actions>
      <cues>
        <cue name="Reset_On_Lua_Reload" instantiate="true">
          <conditions>
            <event_cue_signalled cue="md.Simple_Menu_API.Reloaded"/>
          </conditions>
          <actions>
            <include_actions ref="Reset_Globals"/>
          </actions>
        </cue>
      </cues>
    </cue>
    <library name="Reset_Globals">
      <actions>
        <set_value name="Globals.$DebugChance" exact="0"/>
        
        <!-- Define the options; these can be tweaked between lua reloads. -->
        <set_value name="Globals.$options" exact="[
                   
          table[
            $id         = '$disable_animations',
            $name       = 'Disable menu animations',
            $mouseover  = 'Removes the animation and associated delay for top menus opening',
            $default    = 0,
            $type       = 'button',
            ],
             
          table[
            $id         = '$tooltip_fontsize',
            $name       = 'Adjust tooltip font size',
            $mouseover  = 'Globally increases the font size of tooltips (originally 9 pt)',
            $default    = 9,
            $type       = 'slidercell',
            $args       = table[
              $min      = 9,
              $max      = 12,
              $suffix   = 'pt',
              $hideMaxValue = true,
              ],
            ],
            
          table[
            $disabled   = true,
            $id         = '$adjust_fov',
            $name       = 'Adjust Field of View',
            $mouseover  = 'Changes the FoV multiplier; ui will shrink',
            $default    = 100,
            $type       = 'slidercell',
            $args       = table[
              $min      = 100,
              $max      = 130,
              $suffix   = ' %',
              $hideMaxValue = true,
              ],
            ],
          ]" />
        
        <!--Autofill defaults for missing storage entries.-->
        <do_all exact="Globals.$options.count" counter="$i">          
          <!--Check that it doesn't exist yet.-->
          <do_if  value="not Globals.$storage.{Globals.$options.{$i}.$id}?">
            <set_value name="Globals.$storage.{Globals.$options.{$i}.$id}"
                       exact="Globals.$options.{$i}.$default"/>
          </do_if>
        </do_all>
        
        <!-- Transmit current values to the lua, to restore after reload. -->
        <!-- TODO: loop over options for this, and check $disabled. -->
        <raise_lua_event
          name="'Simple_Menu_Options.disable_animations'"
          param="Globals.$storage.$disable_animations"/>
        <raise_lua_event
          name="'Simple_Menu_Options.tooltip_fontsize'"
          param="Globals.$storage.$tooltip_fontsize"/>
        <!--<raise_lua_event
          name="'Simple_Menu_Options.adjust_fov'"
          param="Globals.$storage.$adjust_fov"/>-->
          
      </actions>
    </library>

    <!--
      Library to call when setting or updating the value of widget.
      Inputs:
        $args   - table of args, with following already filled:
          $id   - string, name of value stored in globals.
          $type - type of widget, eg. "button"
          ...   - Tables for complex properties already created, eg. text.
      Outputs:
        $args filled in, depending on widget.
    -->
    <library name="Fill_Widget_Value">
      <actions>
                
        <do_if value="$args.$type == 'button'">
          <!-- Buttons will be on/off labeled toggles. -->
          <set_value name="$args.$text.$text" exact="if (Globals.$storage.{$args.$id}) then {1001, 2648} else {1001, 2649}"/>          
        </do_if>

        <do_elseif value="$args.$type == 'slidercell'">          
          <set_value name="$args.$start" exact="Globals.$storage.{$args.$id}"/>
        </do_elseif>
        
      </actions>
    </library>


    <!-- Register an options menu. -->
    <cue name="Register_Options_Menu" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled cue="md.Simple_Menu_API.Reloaded"/>
      </conditions>
      <actions>
        <signal_cue_instantly
          cue="md.Simple_Menu_API.Register_Options_Menu"
          param = "table[
            $id      = 'simple_menu_options',
            $columns = 2, 
            $title   = 'Simple Menu Options',
            $onOpen  = Build_Options_Menu
            ]"/>
      </actions>
    </cue>

    <!-- Callback for building the options menu. -->
    <cue name="Build_Options_Menu" instantiate="true" namespace="this">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <actions>
        
        <!-- Loop over the options list. -->
        <do_all exact="Globals.$options.count" counter="$i">          
          <!-- Rename -->
          <set_value name="$option" exact="Globals.$options.{$i}"/>

          <!-- Don't list disabled options. -->
          <do_if value="$option.$disabled? and $option.$disabled">
            <continue/>
          </do_if>
          
          <!-- Prepare a row -->
          <signal_cue_instantly cue="md.Simple_Menu_API.Add_Row"/>
        
          <!-- Generic label -->
          <signal_cue_instantly
            cue="md.Simple_Menu_API.Make_Text"
            param = "table[
              $col = 1, 
              $text = $option.$name, 
              $mouseOverText = $option.$mouseover,
              $cellBGColor = 'Helper.color.transparent60',
              ]"/>
        
          <!-- Set up widget args, based on type. -->
          <do_if value="$option.$type == 'button'">
            <set_value name="$args" exact="table[
              $command = 'Make_Widget',
              $type    = 'button',
              $id      = $option.$id,
              $text    = table[$halign='left'],
              $col     = 2,
              $echo    = $option.$id,
              $onClick = Handle_Var_Change,
              ]"/>
          </do_if>
          <do_elseif value="$option.$type == 'slidercell'">
            <set_value name="$args" exact="table[
              $command = 'Make_Widget',
              $type    = 'slidercell',
              $id      = $option.$id,
              $col     = 2,
              $echo    = $option.$id,
              $onSliderCellConfirm = Handle_Var_Change,
              ]"/>
          </do_elseif>
          
          <!-- Merge in any extra specified args. -->
          <do_if value="$option.$args?">
            <do_all exact="$option.$args.keys.list.count" counter="$i">
              <set_value name="$key" exact="$option.$args.keys.list.{$i}"/>
              <set_value name="$val" exact="$option.$args.{$key}"/>
              <set_value name="$args.{$key}" exact="$val"/>
            </do_all>
          </do_if>
          
          <!-- Set initial value. -->
          <include_actions ref="Fill_Widget_Value"/>
          
          <!-- Create the widget. -->
          <signal_cue_instantly cue="md.Simple_Menu_API.Send_Command" param = "$args"/>
        
        </do_all>
      </actions>
    </cue>

    
    <!--
    Handle changes to global vars from menu.
    -->
    <cue name="Handle_Var_Change" instantiate="true">
      <conditions>
        <event_cue_signalled />
      </conditions>
      <actions>
        <debug_text text="'Response: %s'.[event.param]" 
                chance="100" filter="general"/>
        
        <!--
          Exact behavior depends a on what var was changed, since they
          each tend to have lua side functions to signal.
          TODO; might be okay to put all update stuff in the lua, and just
          use the md for menu setup and value storage.
        -->
        <set_value name="$id" exact="event.param.$id"/>
        <debug_text text="'Handling: %s'.[$id]"
                chance="100" filter="general"/>
        
        <!--TODO: make generic on/off button handler.-->
        <do_if value="$id == '$disable_animations'">
          
          <!-- Toggle current option. -->
          <set_value name="Globals.$storage.{$id}" exact="if (Globals.$storage.{$id} == 0) then 1 else 0"/>

          <!-- Signal the lua, sending 0 or 1. -->
          <raise_lua_event
            name="'Simple_Menu_Options.disable_animations'"
            param="Globals.$storage.{$id}"/>

          <!-- Update the button. -->
          <set_value name="$args" exact="table[
              $id      = $id,
              $type    = 'button',
              $text    = table[],
              ]"/>
          <include_actions ref="Fill_Widget_Value"/>
          <signal_cue_instantly cue="md.Simple_Menu_API.Update_Widget" param = "$args"/>

        </do_if>

        <!--TODO: make generic slider handler.-->
        <do_elseif value="$id == '$tooltip_fontsize'">
          <do_if value="event.param.$valuechanged">
            <set_value name="Globals.$storage.{$id}" exact="event.param.$value"/>
            
            <!-- Signal the lua, sending new font size. -->
            <raise_lua_event
              name="'Simple_Menu_Options.tooltip_fontsize'"
              param="Globals.$storage.{$id}"/>

          </do_if>
        </do_elseif>

        <do_elseif value="$id == '$adjust_fov'">
          <do_if value="event.param.$valuechanged">
            <set_value name="Globals.$storage.{$id}" exact="event.param.$value"/>

            <!-- Signal the lua, sending new fov. -->
            <raise_lua_event
              name="'Simple_Menu_Options.adjust_fov'"
              param="Globals.$storage.{$id}"/>

          </do_if>
        </do_elseif>

      </actions>
    </cue>


  </cues>

</mdscript>